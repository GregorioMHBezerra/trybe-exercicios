const createItem = require('./createItem');
describe('a fun√ß√£o createItem', () => {
  it.todo('cria um item v√°lido');
  it.todo('utiliza zero como quantidade padr√£o');
  it.todo('Lan√ßa um erro quando n√£o recebe par√¢metros');
  it.todo('Lan√ßa um erro se o nome do item n√£o √© uma string');
  it.todo('Lan√ßa um erro se o pre√ßo √© negativo');
  it.todo('Lan√ßa um erro se o pre√ßo √© zero');
});

// 1 Remova o .todo do primeiro it e adicione a fun√ß√£o que ir√° implementar o teste:

// it('cria um item v√°lido', () => {
  // seus testes v√£o aqui!
// });

// 2 Construindo nosso teste:
// O que a fun√ß√£o createItem recebe como par√¢metro?
// Para a chamada da fun√ß√£o createItem com os argumentos 'banana', 'kg', 1.99 e 20, qual o resultado esperado?
// Considerando como resultado esperado o objeto { name: 'banana', unit: 'kg', price: 1.99, quantity: 20 }, qual matcher mais adequado?
// 3 Remova o .todo e implemente o teste para a chamada da fun√ß√£o createItem com os argumentos 'banana', 'kg', 1.99 e 20, e verifique se o resultado √© o objeto { name: 'banana', unit: 'kg', price: 1.99, quantity: 20 }.

// 4 Qual a cobertura de c√≥digo atual da nossa fun√ß√£o?

// Teste se a fun√ß√£o createItem utiliza zero como quantidade padr√£o.

// 1 Construindo nosso teste:
// Qual condi√ß√£o da fun√ß√£o createItem implementa essa caracter√≠stica?
// Como podemos chamar a fun√ß√£o para que entre nessa condi√ß√£o?
// Para a chamada da fun√ß√£o createItem com os argumentos 'banana', 'kg' e 1.99, sem o quarto argumento, qual o resultado esperado?
// Considerando que o resultado esperado √© um objeto que tenha a propriedade quantity igual a zero, qual o matcher mais adequado?
// 2 Remova o .todo e implemente o teste para a chamada da fun√ß√£o createItem com os argumentos 'banana', 'kg' e 1.99, e verifique se o resultado tem a propriedade quantity com o valor 0.

// 3 Qual a cobertura de c√≥digo atual da nossa fun√ß√£o? Aumentou em compara√ß√£o com o exerc√≠cio anterior?

// Teste se a fun√ß√£o createItem lan√ßa algum erro quando n√£o recebe par√¢metros.

// 1 Implemente o teste para a chamada da fun√ß√£o createItem sem argumentos e verifique se √© lan√ßada alguma exce√ß√£o. Qual o matcher mais adequado? Lembre-se de envolver a chamada da fun√ß√£o em uma nova fun√ß√£o, para que o Jest possa capturar o erro, conforme orienta a documenta√ß√£o. N√£o se preocupe em qual erro √© retornado, vamos fazer isso no pr√≥ximo exerc√≠cio.

// 2 Analise a cobertura de c√≥digo. Qual a cobertura atual?

// Teste se a fun√ß√£o createItem lan√ßa um erro se o nome do item n√£o √© uma string.

// 1 Vamos supor que tenhamos invertido o nome do item com o pre√ßo na chamada da fun√ß√£o, passando como par√¢metro: 1.99, 'kg', 'banana' e 20. Essa chamada dever√° retornar o erro 'O nome do item deve ser uma string'.Afinal, estamos passando 1.99 para o par√¢metro name. Como podemos verificar se retorna exatamente esse erro?

// 2 Analise a cobertura de c√≥digo. Mudaram as linhas cobertas no exerc√≠cio anterior?

// Teste se a fun√ß√£o createItem lan√ßa um erro se o pre√ßo do item √© negativo ou zero.

// 1 Crie um teste que, ao chamar a fun√ß√£o passando -0.01 para o pre√ßo, verifica se a fun√ß√£o lan√ßa o erro 'O pre√ßo do item deve ser maior que zero'.

// 2 Analise a cobertura de c√≥digo.

// 3 Crie um teste que, ao chamar a fun√ß√£o passando 0.00 para o pre√ßo, verifica se a fun√ß√£o lan√ßa o erro 'O pre√ßo do item deve ser maior que zero'.

// 4 Analise novamente a cobertura de c√≥digo. A cobertura n√£o muda, mas foram testados casos diferentes üòâ.